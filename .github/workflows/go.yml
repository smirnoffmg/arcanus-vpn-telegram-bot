name: Go

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.21.x', '1.22.x' ]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vpnbot_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Install dependencies
        run: go mod download

      - name: Run linter
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m

      - name: Run tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/vpnbot_test?sslmode=disable
          TELEGRAM_BOT_TOKEN: test_token
          KAFKA_ENABLED: false
          LOG_LEVEL: debug
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.go-version }}
          path: |
            coverage.out
            coverage.html

      - name: Build
        run: go build -v ./...

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'

      - name: Install dependencies
        run: go mod download

      - name: Build binary
        run: |
          mkdir -p bin
          go build -o bin/vpnbot ./cmd/bot
          go build -o bin/migrate ./cmd/migrate

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: vpnbot-binaries
          path: bin/

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'

      - name: Run security scan
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      - name: Run dependency check
        run: |
          go list -m all | grep -E "(github\.com|golang\.org)" > dependencies.txt
          echo "Dependencies checked for known vulnerabilities"
